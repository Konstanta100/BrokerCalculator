// Code generated by MockGen. DO NOT EDIT.
// Source: ./querier.go
//
// Generated by this command:
//
//	mockgen -source=./querier.go -destination=./mock_repository.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	pgtype "github.com/jackc/pgx/v5/pgtype"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// AccountById mocks base method.
func (m *MockQuerier) AccountById(ctx context.Context, id string) (*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountById", ctx, id)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountById indicates an expected call of AccountById.
func (mr *MockQuerierMockRecorder) AccountById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountById", reflect.TypeOf((*MockQuerier)(nil).AccountById), ctx, id)
}

// AccountCreate mocks base method.
func (m *MockQuerier) AccountCreate(ctx context.Context, arg AccountCreateParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountCreate", ctx, arg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountCreate indicates an expected call of AccountCreate.
func (mr *MockQuerierMockRecorder) AccountCreate(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountCreate", reflect.TypeOf((*MockQuerier)(nil).AccountCreate), ctx, arg)
}

// AccountsByUserId mocks base method.
func (m *MockQuerier) AccountsByUserId(ctx context.Context, userID pgtype.UUID) ([]*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountsByUserId", ctx, userID)
	ret0, _ := ret[0].([]*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountsByUserId indicates an expected call of AccountsByUserId.
func (mr *MockQuerierMockRecorder) AccountsByUserId(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountsByUserId", reflect.TypeOf((*MockQuerier)(nil).AccountsByUserId), ctx, userID)
}

// BulkInsertOperations mocks base method.
func (m *MockQuerier) BulkInsertOperations(ctx context.Context, arg []BulkInsertOperationsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkInsertOperations", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkInsertOperations indicates an expected call of BulkInsertOperations.
func (mr *MockQuerierMockRecorder) BulkInsertOperations(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkInsertOperations", reflect.TypeOf((*MockQuerier)(nil).BulkInsertOperations), ctx, arg)
}

// OperationCreate mocks base method.
func (m *MockQuerier) OperationCreate(ctx context.Context, arg OperationCreateParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationCreate", ctx, arg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationCreate indicates an expected call of OperationCreate.
func (mr *MockQuerierMockRecorder) OperationCreate(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationCreate", reflect.TypeOf((*MockQuerier)(nil).OperationCreate), ctx, arg)
}

// OperationsByAccountId mocks base method.
func (m *MockQuerier) OperationsByAccountId(ctx context.Context, accountID string) ([]*Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationsByAccountId", ctx, accountID)
	ret0, _ := ret[0].([]*Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationsByAccountId indicates an expected call of OperationsByAccountId.
func (mr *MockQuerierMockRecorder) OperationsByAccountId(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationsByAccountId", reflect.TypeOf((*MockQuerier)(nil).OperationsByAccountId), ctx, accountID)
}

// OperationsByInstrument mocks base method.
func (m *MockQuerier) OperationsByInstrument(ctx context.Context, arg OperationsByInstrumentParams) ([]*Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationsByInstrument", ctx, arg)
	ret0, _ := ret[0].([]*Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationsByInstrument indicates an expected call of OperationsByInstrument.
func (mr *MockQuerierMockRecorder) OperationsByInstrument(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationsByInstrument", reflect.TypeOf((*MockQuerier)(nil).OperationsByInstrument), ctx, arg)
}

// OperationsByInstrumentAndDateRange mocks base method.
func (m *MockQuerier) OperationsByInstrumentAndDateRange(ctx context.Context, arg OperationsByInstrumentAndDateRangeParams) ([]*Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationsByInstrumentAndDateRange", ctx, arg)
	ret0, _ := ret[0].([]*Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationsByInstrumentAndDateRange indicates an expected call of OperationsByInstrumentAndDateRange.
func (mr *MockQuerierMockRecorder) OperationsByInstrumentAndDateRange(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationsByInstrumentAndDateRange", reflect.TypeOf((*MockQuerier)(nil).OperationsByInstrumentAndDateRange), ctx, arg)
}

// UserById mocks base method.
func (m *MockQuerier) UserById(ctx context.Context, id pgtype.UUID) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserById", ctx, id)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserById indicates an expected call of UserById.
func (mr *MockQuerierMockRecorder) UserById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserById", reflect.TypeOf((*MockQuerier)(nil).UserById), ctx, id)
}

// UserCreate mocks base method.
func (m *MockQuerier) UserCreate(ctx context.Context, arg UserCreateParams) (pgtype.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreate", ctx, arg)
	ret0, _ := ret[0].(pgtype.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCreate indicates an expected call of UserCreate.
func (mr *MockQuerierMockRecorder) UserCreate(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreate", reflect.TypeOf((*MockQuerier)(nil).UserCreate), ctx, arg)
}
